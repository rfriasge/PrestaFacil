@page "/fetchdata"

@using PrestaFacil.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            FilterMode="FilterMode.Advanced" AllowPaging="true" PageSize="4" AllowSorting='true' Data="@forecasts"
            TItem="WeatherForecast" ColumnWidth="200px">
            <Columns>
            <RadzenGridColumn TItem="WeatherForecast" Property="Date" Title="Date" />
            <RadzenGridColumn TItem="WeatherForecast" Property="TemperatureC" Title="TemperatureC" />
            <RadzenGridColumn TItem="WeatherForecast" Property="TemperatureF" Title="TemperatureF" />
            <RadzenGridColumn TItem="WeatherForecast" Property="Summary" Title="Summary" />
            </Columns>
    </RadzenGrid>
    @*<table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>*@
}

@code {
    private WeatherForecast[] forecasts;
    
    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }
}
